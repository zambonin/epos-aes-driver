// EPOS Poly1305-AES Message Authentication Code Component Test Program

#include <aes.h>
#include <utility/ostream.h>
#include <utility/poly1305.h>
#include <utility/random.h>

using namespace EPOS;

OStream cout;

static const unsigned int CIPHER_BLOCK_SIZE = 16;
static const unsigned int ITERATIONS = 128;
static const unsigned int MSG_SIZE_MAX = 64;

typedef struct {
  unsigned char n[CIPHER_BLOCK_SIZE], k[CIPHER_BLOCK_SIZE],
      r[CIPHER_BLOCK_SIZE], expected[CIPHER_BLOCK_SIZE], m[MSG_SIZE_MAX], sz;
} poly1305_example_test;

unsigned int test_known_vectors(), test_random_vectors();

int main() {
  unsigned int seed = Random::random();
  Random::seed(seed);

  cout << "EPOS Poly1305 Test" << endl;
  cout << "Random seed = " << seed << endl;
  cout << "Iterations = " << ITERATIONS << endl;
  cout << "Maximum message size = " << MSG_SIZE_MAX << endl << endl;

  return test_known_vectors() + test_random_vectors();
}

unsigned int test_random_vectors() {
  unsigned int i, j, index, fails = 0,
                            msg_len = Random::random() % (MSG_SIZE_MAX + 1);
  Poly1305<AES<CIPHER_BLOCK_SIZE>> p;
  poly1305_example_test ex;

  ex.sz = msg_len;
  cout << "Testing random vectors... " << endl;
  for (i = 0; i < ITERATIONS; ++i) {
    for (j = 0; j < CIPHER_BLOCK_SIZE; ++j) {
      ex.n[j] = Random::random();
      ex.k[j] = Random::random();
      ex.r[j] = Random::random();
    }
    for (j = 0; j < msg_len; ++j) {
      ex.m[j] = Random::random();
    }

    p.k(ex.k);
    p.r(ex.r);

    p.stamp(ex.expected, ex.n, ex.m, ex.sz);
    fails +=
        static_cast<unsigned int>(!p.verify(ex.expected, ex.n, ex.m, ex.sz));

    { // test modified output
      index = Random::random() % CIPHER_BLOCK_SIZE;
      ex.expected[index]++;
      fails +=
          static_cast<unsigned int>(p.verify(ex.expected, ex.n, ex.m, ex.sz));
    }

    { // test modified nonce
      index = Random::random() % CIPHER_BLOCK_SIZE;
      ex.n[index]++;
      fails +=
          static_cast<unsigned int>(p.verify(ex.expected, ex.n, ex.m, ex.sz));
    }

    { // test modified message
      index = Random::random() % MSG_SIZE_MAX;
      ex.m[index]++;
      fails +=
          static_cast<unsigned int>(p.verify(ex.expected, ex.n, ex.m, ex.sz));
    }
  }

  cout << "Random vector test has " << fails << " fails." << endl << endl;
  return fails;
}

unsigned int test_known_vectors() {
  const poly1305_example_test examples[] = {
      {
          {0xfb, 0x44, 0x73, 0x50, 0xc4, 0xe8, 0x68, 0xc5, 0x2a, 0xc3, 0x27,
           0x5c, 0xf9, 0xd4, 0x32, 0x7e},
          {0xec, 0x07, 0x4c, 0x83, 0x55, 0x80, 0x74, 0x17, 0x01, 0x42, 0x5b,
           0x62, 0x32, 0x35, 0xad, 0xd6},
          {0x85, 0x1f, 0xc4, 0x0c, 0x34, 0x67, 0xac, 0x0b, 0xe0, 0x5c, 0xc2,
           0x04, 0x04, 0xf3, 0xf7, 0x00},
          {0xf4, 0xc6, 0x33, 0xc3, 0x04, 0x4f, 0xc1, 0x45, 0xf8, 0x4f, 0x33,
           0x5c, 0xb8, 0x19, 0x53, 0xde},
          {0xf3, 0xf6},
          2,
      },
      {
          {0x61, 0xee, 0x09, 0x21, 0x8d, 0x29, 0xb0, 0xaa, 0xed, 0x7e, 0x15,
           0x4a, 0x2c, 0x55, 0x09, 0xcc},
          {0x75, 0xde, 0xaa, 0x25, 0xc0, 0x9f, 0x20, 0x8e, 0x1d, 0xc4, 0xce,
           0x6b, 0x5c, 0xad, 0x3f, 0xbf},
          {0xa0, 0xf3, 0x08, 0x00, 0x00, 0xf4, 0x64, 0x00, 0xd0, 0xc7, 0xe9,
           0x07, 0x6c, 0x83, 0x44, 0x03},
          {0xdd, 0x3f, 0xab, 0x22, 0x51, 0xf1, 0x1a, 0xc7, 0x59, 0xf0, 0x88,
           0x71, 0x29, 0xcc, 0x2e, 0xe7},
          0,
      },
      {
          {0xae, 0x21, 0x2a, 0x55, 0x39, 0x97, 0x29, 0x59, 0x5d, 0xea, 0x45,
           0x8b, 0xc6, 0x21, 0xff, 0x0e},
          {0x6a, 0xcb, 0x5f, 0x61, 0xa7, 0x17, 0x6d, 0xd3, 0x20, 0xc5, 0xc1,
           0xeb, 0x2e, 0xdc, 0xdc, 0x74},
          {0x48, 0x44, 0x3d, 0x0b, 0xb0, 0xd2, 0x11, 0x09, 0xc8, 0x9a, 0x10,
           0x0b, 0x5c, 0xe2, 0xc2, 0x08},
          {0x0e, 0xe1, 0xc1, 0x6b, 0xb7, 0x3f, 0x0f, 0x4f, 0xd1, 0x98, 0x81,
           0x75, 0x3c, 0x01, 0xcd, 0xbe},
          {0x66, 0x3c, 0xea, 0x19, 0x0f, 0xfb, 0x83, 0xd8, 0x95, 0x93, 0xf3,
           0xf4, 0x76, 0xb6, 0xbc, 0x24, 0xd7, 0xe6, 0x79, 0x10, 0x7e, 0xa2,
           0x6a, 0xdb, 0x8c, 0xaf, 0x66, 0x52, 0xd0, 0x65, 0x61, 0x36},
          32,
      },
      {
          {0x9a, 0xe8, 0x31, 0xe7, 0x43, 0x97, 0x8d, 0x3a, 0x23, 0x52, 0x7c,
           0x71, 0x28, 0x14, 0x9e, 0x3a},
          {0xe1, 0xa5, 0x66, 0x8a, 0x4d, 0x5b, 0x66, 0xa5, 0xf6, 0x8c, 0xc5,
           0x42, 0x4e, 0xd5, 0x98, 0x2d},
          {0x12, 0x97, 0x6a, 0x08, 0xc4, 0x42, 0x6d, 0x0c, 0xe8, 0xa8, 0x24,
           0x07, 0xc4, 0xf4, 0x82, 0x07},
          {0x51, 0x54, 0xad, 0x0d, 0x2c, 0xb2, 0x6e, 0x01, 0x27, 0x4f, 0xc5,
           0x11, 0x48, 0x49, 0x1f, 0x1b},
          {0xab, 0x08, 0x12, 0x72, 0x4a, 0x7f, 0x1e, 0x34, 0x27, 0x42, 0xcb,
           0xed, 0x37, 0x4d, 0x94, 0xd1, 0x36, 0xc6, 0xb8, 0x79, 0x5d, 0x45,
           0xb3, 0x81, 0x98, 0x30, 0xf2, 0xc0, 0x44, 0x91, 0xfa, 0xf0, 0x99,
           0x0c, 0x62, 0xe4, 0x8b, 0x80, 0x18, 0xb2, 0xc3, 0xe4, 0xa0, 0xfa,
           0x31, 0x34, 0xcb, 0x67, 0xfa, 0x83, 0xe1, 0x58, 0xc9, 0x94, 0xd9,
           0x61, 0xc4, 0xcb, 0x21, 0x09, 0x5c, 0x1b, 0xf9},
          63,
      },
  };

  unsigned char out[CIPHER_BLOCK_SIZE];
  unsigned int fails = 0, i, j;
  bool ok;
  Poly1305<AES<CIPHER_BLOCK_SIZE>> p;

  cout << "Testing known vectors... " << endl;
  for (i = 0; i < sizeof(examples) / sizeof(examples[0]); ++i) {
    p.k(examples[i].k);
    p.r(examples[i].r);
    p.stamp(out, examples[i].n, examples[i].m, examples[i].sz);

    ok = p.verify(out, examples[i].n, examples[i].m, examples[i].sz);
    for (j = 0; j < CIPHER_BLOCK_SIZE; ++j) {
      ok &= (out[j] == examples[i].expected[j]);
    }

    fails += static_cast<unsigned int>(!ok);
  }

  cout << "Known vector test has " << fails << " fails." << endl << endl;
  return fails;
}
