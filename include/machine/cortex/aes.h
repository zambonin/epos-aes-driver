// EPOS ARM Cortex AES Mediator Declarations

#ifndef __cortex_aes_h
#define __cortex_aes_h

__BEGIN_SYS

class AES_Cortex {
public:
  // AES register offsets
  enum {
    AES_DMAC_CH0_CTRL = 0x4008B000,
    AES_DMAC_CH0_EXTADDR = 0x4008B004,
    AES_DMAC_CH0_DMALENGTH = 0x4008B00C,
    AES_DMAC_STATUS = 0x4008B018,
    AES_DMAC_SWRES = 0x4008B01C,
    AES_DMAC_CH1_CTRL = 0x4008B020,
    AES_DMAC_CH1_EXTADDR = 0x4008B024,
    AES_DMAC_CH1_DMALENGTH = 0x4008B02C,
    AES_DMAC_MST_RUNPARAMS = 0x4008B078,
    AES_DMAC_PERSR = 0x4008B07C,
    AES_DMAC_OPTIONS = 0x4008B0F8,
    AES_DMAC_VERSION = 0x4008B0FC,
    AES_KEY_STORE_WRITE_AREA = 0x4008B400,
    AES_KEY_STORE_WRITTEN_AREA = 0x4008B404,
    AES_KEY_STORE_SIZE = 0x4008B408,
    AES_KEY_STORE_READ_AREA = 0x4008B40C,
    AES_AES_KEY2_0 = 0x4008B500,
    AES_AES_KEY2_1 = 0x4008B504,
    AES_AES_KEY2_2 = 0x4008B508,
    AES_AES_KEY2_3 = 0x4008B50C,
    AES_AES_KEY3_0 = 0x4008B510,
    AES_AES_KEY3_1 = 0x4008B514,
    AES_AES_KEY3_2 = 0x4008B518,
    AES_AES_KEY3_3 = 0x4008B51C,
    AES_AES_IV_0 = 0x4008B540,
    AES_AES_IV_1 = 0x4008B544,
    AES_AES_IV_2 = 0x4008B548,
    AES_AES_IV_3 = 0x4008B54C,
    AES_AES_CTRL = 0x4008B550,
    AES_AES_C_LENGTH_0 = 0x4008B554,
    AES_AES_C_LENGTH_1 = 0x4008B558,
    AES_AES_AUTH_LENGTH = 0x4008B55C,
    AES_AES_DATA_IN_OUT_0 = 0x4008B560,
    AES_AES_DATA_IN_OUT_1 = 0x4008B564,
    AES_AES_DATA_IN_OUT_2 = 0x4008B568,
    AES_AES_DATA_IN_OUT_3 = 0x4008B56C,
    AES_AES_TAG_OUT_0 = 0x4008B570,
    AES_AES_TAG_OUT_1 = 0x4008B574,
    AES_AES_TAG_OUT_2 = 0x4008B578,
    AES_AES_TAG_OUT_3 = 0x4008B57C,
    AES_HASH_DATA_IN_0 = 0x4008B600,
    AES_HASH_DATA_IN_1 = 0x4008B604,
    AES_HASH_DATA_IN_2 = 0x4008B608,
    AES_HASH_DATA_IN_3 = 0x4008B60C,
    AES_HASH_DATA_IN_4 = 0x4008B610,
    AES_HASH_DATA_IN_5 = 0x4008B614,
    AES_HASH_DATA_IN_6 = 0x4008B618,
    AES_HASH_DATA_IN_7 = 0x4008B61C,
    AES_HASH_DATA_IN_8 = 0x4008B620,
    AES_HASH_DATA_IN_9 = 0x4008B624,
    AES_HASH_DATA_IN_10 = 0x4008B628,
    AES_HASH_DATA_IN_11 = 0x4008B62C,
    AES_HASH_DATA_IN_12 = 0x4008B630,
    AES_HASH_DATA_IN_13 = 0x4008B634,
    AES_HASH_DATA_IN_14 = 0x4008B638,
    AES_HASH_DATA_IN_15 = 0x4008B63C,
    AES_HASH_IO_BUF_CTRL = 0x4008B640,
    AES_HASH_MODE_IN = 0x4008B644,
    AES_HASH_LENGTH_IN_L = 0x4008B648,
    AES_HASH_LENGTH_IN_H = 0x4008B64C,
    AES_HASH_DIGEST_A = 0x4008B650,
    AES_HASH_DIGEST_B = 0x4008B654,
    AES_HASH_DIGEST_C = 0x4008B658,
    AES_HASH_DIGEST_D = 0x4008B65C,
    AES_HASH_DIGEST_E = 0x4008B660,
    AES_HASH_DIGEST_F = 0x4008B664,
    AES_HASH_DIGEST_G = 0x4008B668,
    AES_HASH_DIGEST_H = 0x4008B66C,
    AES_CTRL_ALG_SEL = 0x4008B700,
    AES_CTRL_PROT_EN = 0x4008B704,
    AES_CTRL_SW_RESET = 0x4008B740,
    AES_CTRL_INT_CFG = 0x4008B780,
    AES_CTRL_INT_EN = 0x4008B784,
    AES_CTRL_INT_CLR = 0x4008B788,
    AES_CTRL_INT_SET = 0x4008B78C,
    AES_CTRL_INT_STAT = 0x4008B790,
    AES_CTRL_OPTIONS = 0x4008B7F8,
    AES_CTRL_VERSION = 0x4008B7FC,
  };

  // Bit fields for the AES_DMAC_CH0_CTRL register
  enum {
    AES_DMAC_CH0_CTRL_PRIO = 0x00000002,
    AES_DMAC_CH0_CTRL_PRIO_M = 0x00000002,
    AES_DMAC_CH0_CTRL_PRIO_S = 1,
    AES_DMAC_CH0_CTRL_EN = 0x00000001,
    AES_DMAC_CH0_CTRL_EN_M = 0x00000001,
    AES_DMAC_CH0_CTRL_EN_S = 0,
  };

  // Bit fields for the AES_DMAC_CH0_EXTADDR register
  enum {
    AES_DMAC_CH0_EXTADDR_ADDR_M = 0xFFFFFFFF,
    AES_DMAC_CH0_EXTADDR_ADDR_S = 0,
  };

  // Bit fields for the AES_DMAC_CH0_DMALENGTH register
  enum {
    AES_DMAC_CH0_DMALENGTH_DMALEN_M = 0x0000FFFF,
    AES_DMAC_CH0_DMALENGTH_DMALEN_S = 0,
  };

  // Bit fields for the AES_DMAC_STATUS register
  enum {
    AES_DMAC_STATUS_PORT_ERR = 0x00020000,
    AES_DMAC_STATUS_PORT_ERR_M = 0x00020000,
    AES_DMAC_STATUS_PORT_ERR_S = 17,
    AES_DMAC_STATUS_CH1_ACT = 0x00000002,
    AES_DMAC_STATUS_CH1_ACT_M = 0x00000002,
    AES_DMAC_STATUS_CH1_ACT_S = 1,
    AES_DMAC_STATUS_CH0_ACT = 0x00000001,
    AES_DMAC_STATUS_CH0_ACT_M = 0x00000001,
    AES_DMAC_STATUS_CH0_ACT_S = 0,
  };

  // Bit fields for the AES_DMAC_SWRES register
  enum {
    AES_DMAC_SWRES_SWRES = 0x00000001,
    AES_DMAC_SWRES_SWRES_M = 0x00000001,
    AES_DMAC_SWRES_SWRES_S = 0,
  };

  // Bit fields for the AES_DMAC_CH1_CTRL register
  enum {
    AES_DMAC_CH1_CTRL_PRIO = 0x00000002,
    AES_DMAC_CH1_CTRL_PRIO_M = 0x00000002,
    AES_DMAC_CH1_CTRL_PRIO_S = 1,
    AES_DMAC_CH1_CTRL_EN = 0x00000001,
    AES_DMAC_CH1_CTRL_EN_M = 0x00000001,
    AES_DMAC_CH1_CTRL_EN_S = 0,
  };

  // Bit fields for the AES_DMAC_CH1_EXTADDR register
  enum {
    AES_DMAC_CH1_EXTADDR_ADDR_M = 0xFFFFFFFF,
    AES_DMAC_CH1_EXTADDR_ADDR_S = 0,
  };

  // Bit fields for the AES_DMAC_CH1_DMALENGTH register
  enum {
    AES_DMAC_CH1_DMALENGTH_DMALEN_M = 0x0000FFFF,
    AES_DMAC_CH1_DMALENGTH_DMALEN_S = 0,
  };

  // Bit fields for the AES_DMAC_MST_RUNPARAMS register
  enum {
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_BURST_SIZE_M = 0x0000F000,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_BURST_SIZE_S = 12,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_IDLE_EN = 0x00000800,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_IDLE_EN_M = 0x00000800,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_IDLE_EN_S = 11,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_INCR_EN = 0x00000400,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_INCR_EN_M = 0x00000400,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_INCR_EN_S = 10,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_LOCK_EN = 0x00000200,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_LOCK_EN_M = 0x00000200,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_LOCK_EN_S = 9,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_BIGEND = 0x00000100,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_BIGEND_M = 0x00000100,
    AES_DMAC_MST_RUNPARAMS_AHB_MST1_BIGEND_S = 8,
  };

  // Bit fields for the AES_DMAC_PERSR register
  enum {
    AES_DMAC_PERSR_PORT1_AHB_ERROR = 0x00001000,
    AES_DMAC_PERSR_PORT1_AHB_ERROR_M = 0x00001000,
    AES_DMAC_PERSR_PORT1_AHB_ERROR_S = 12,
    AES_DMAC_PERSR_PORT1_CHANNEL = 0x00000200,
    AES_DMAC_PERSR_PORT1_CHANNEL_M = 0x00000200,
    AES_DMAC_PERSR_PORT1_CHANNEL_S = 9,
  };

  // Bit fields for the AES_DMAC_OPTIONS register
  enum {
    AES_DMAC_OPTIONS_NR_OF_CHANNELS_M = 0x00000F00,
    AES_DMAC_OPTIONS_NR_OF_CHANNELS_S = 8,
    AES_DMAC_OPTIONS_NR_OF_PORTS_M = 0x00000007,
    AES_DMAC_OPTIONS_NR_OF_PORTS_S = 0,
  };

  // Bit fields for the AES_DMAC_VERSION register
  enum {
    AES_DMAC_VERSION_HW_MAJOR_VERSION_M = 0x0F000000,
    AES_DMAC_VERSION_HW_MAJOR_VERSION_S = 24,
    AES_DMAC_VERSION_HW_MINOR_VERSION_M = 0x00F00000,
    AES_DMAC_VERSION_HW_MINOR_VERSION_S = 20,
    AES_DMAC_VERSION_HW_PATCH_LEVEL_M = 0x000F0000,
    AES_DMAC_VERSION_HW_PATCH_LEVEL_S = 16,
    AES_DMAC_VERSION_EIP_NUMBER_COMPL_M = 0x0000FF00,
    AES_DMAC_VERSION_EIP_NUMBER_COMPL_S = 8,
    AES_DMAC_VERSION_EIP_NUMBER_M = 0x000000FF,
    AES_DMAC_VERSION_EIP_NUMBER_S = 0,
  };

  // Bit fields for the AES_KEY_STORE_WRITE_AREA register
  enum {
    AES_KEY_STORE_WRITE_AREA_RAM_AREA7 = 0x00000080,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA7_M = 0x00000080,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA7_S = 7,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA6 = 0x00000040,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA6_M = 0x00000040,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA6_S = 6,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA5 = 0x00000020,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA5_M = 0x00000020,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA5_S = 5,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA4 = 0x00000010,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA4_M = 0x00000010,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA4_S = 4,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA3 = 0x00000008,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA3_M = 0x00000008,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA3_S = 3,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA2 = 0x00000004,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA2_M = 0x00000004,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA2_S = 2,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA1 = 0x00000002,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA1_M = 0x00000002,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA1_S = 1,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA0 = 0x00000001,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA0_M = 0x00000001,
    AES_KEY_STORE_WRITE_AREA_RAM_AREA0_S = 0,
  };

  // Bit fields for the AES_KEY_STORE_WRITTEN_AREA register
  enum {
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN7 = 0x00000080,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN7_M = 0x00000080,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN7_S = 7,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN6 = 0x00000040,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN6_M = 0x00000040,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN6_S = 6,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN5 = 0x00000020,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN5_M = 0x00000020,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN5_S = 5,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN4 = 0x00000010,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN4_M = 0x00000010,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN4_S = 4,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN3 = 0x00000008,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN3_M = 0x00000008,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN3_S = 3,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN2 = 0x00000004,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN2_M = 0x00000004,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN2_S = 2,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN1 = 0x00000002,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN1_M = 0x00000002,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN1_S = 1,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN0 = 0x00000001,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN0_M = 0x00000001,
    AES_KEY_STORE_WRITTEN_AREA_RAM_AREA_WRITTEN0_S = 0,
  };

  // Bit fields for the AES_KEY_STORE_SIZE register
  enum {
    AES_KEY_STORE_SIZE_KEY_SIZE_M = 0x00000003,
    AES_KEY_STORE_SIZE_KEY_SIZE_S = 0,
  };

  // Bit fields for the AES_KEY_STORE_READ_AREA register
  enum {
    AES_KEY_STORE_READ_AREA_BUSY = 0x80000000,
    AES_KEY_STORE_READ_AREA_BUSY_M = 0x80000000,
    AES_KEY_STORE_READ_AREA_BUSY_S = 31,
    AES_KEY_STORE_READ_AREA_RAM_AREA_M = 0x0000000F,
    AES_KEY_STORE_READ_AREA_RAM_AREA_S = 0,
  };

  // Bit fields for the AES_AES_KEY2_0 register
  enum {
    AES_AES_KEY2_0_AES_KEY2_M = 0xFFFFFFFF,
    AES_AES_KEY2_0_AES_KEY2_S = 0,
  };

  // Bit fields for the AES_AES_KEY2_1 register
  enum {
    AES_AES_KEY2_1_AES_KEY2_M = 0xFFFFFFFF,
    AES_AES_KEY2_1_AES_KEY2_S = 0,
  };

  // Bit fields for the AES_AES_KEY2_2 register
  enum {
    AES_AES_KEY2_2_AES_KEY2_M = 0xFFFFFFFF,
    AES_AES_KEY2_2_AES_KEY2_S = 0,
  };

  // Bit fields for the AES_AES_KEY2_3 register
  enum {
    AES_AES_KEY2_3_AES_KEY2_M = 0xFFFFFFFF,
    AES_AES_KEY2_3_AES_KEY2_S = 0,
  };

  // Bit fields for the AES_AES_KEY3_0 register
  enum {
    AES_AES_KEY3_0_AES_KEY2_M = 0xFFFFFFFF,
    AES_AES_KEY3_0_AES_KEY2_S = 0,
  };

  // Bit fields for the AES_AES_KEY3_1 register
  enum {
    AES_AES_KEY3_1_AES_KEY2_M = 0xFFFFFFFF,
    AES_AES_KEY3_1_AES_KEY2_S = 0,
  };

  // Bit fields for the AES_AES_KEY3_2 register
  enum {
    AES_AES_KEY3_2_AES_KEY2_M = 0xFFFFFFFF,
    AES_AES_KEY3_2_AES_KEY2_S = 0,
  };

  // Bit fields for the AES_AES_KEY3_3 register
  enum {
    AES_AES_KEY3_3_AES_KEY2_M = 0xFFFFFFFF,
    AES_AES_KEY3_3_AES_KEY2_S = 0,
  };

  // Bit fields for the AES_AES_IV_0 register
  enum {
    AES_AES_IV_0_AES_IV_M = 0xFFFFFFFF,
    AES_AES_IV_0_AES_IV_S = 0,
  };

  // Bit fields for the AES_AES_IV_1 register
  enum {
    AES_AES_IV_1_AES_IV_M = 0xFFFFFFFF,
    AES_AES_IV_1_AES_IV_S = 0,
  };

  // Bit fields for the AES_AES_IV_2 register
  enum {
    AES_AES_IV_2_AES_IV_M = 0xFFFFFFFF,
    AES_AES_IV_2_AES_IV_S = 0,
  };

  // Bit fields for the AES_AES_IV_3 register
  enum {
    AES_AES_IV_3_AES_IV_M = 0xFFFFFFFF,
    AES_AES_IV_3_AES_IV_S = 0,
  };

  // Bit fields for the AES_AES_CTRL register
  enum {
    AES_AES_CTRL_context_ready = 0x80000000,
    AES_AES_CTRL_context_ready_M = 0x80000000,
    AES_AES_CTRL_context_ready_S = 31,
    AES_AES_CTRL_saved_context_ready = 0x40000000,
    AES_AES_CTRL_saved_context_ready_M = 0x40000000,
    AES_AES_CTRL_saved_context_ready_S = 30,
    AES_AES_CTRL_save_context = 0x20000000,
    AES_AES_CTRL_save_context_M = 0x20000000,
    AES_AES_CTRL_save_context_S = 29,
    AES_AES_CTRL_CCM_M_M = 0x01C00000,
    AES_AES_CTRL_CCM_M_S = 22,
    AES_AES_CTRL_CCM_L_M = 0x00380000,
    AES_AES_CTRL_CCM_L_S = 19,
    AES_AES_CTRL_CCM = 0x00040000,
    AES_AES_CTRL_CCM_M = 0x00040000,
    AES_AES_CTRL_CCM_S = 18,
    AES_AES_CTRL_GCM_M = 0x00030000,
    AES_AES_CTRL_GCM_S = 16,
    AES_AES_CTRL_CBC_MAC = 0x00008000,
    AES_AES_CTRL_CBC_MAC_M = 0x00008000,
    AES_AES_CTRL_CBC_MAC_S = 15,
    AES_AES_CTRL_ctr_width_M = 0x00000180,
    AES_AES_CTRL_ctr_width_S = 7,
    AES_AES_CTRL_CTR = 0x00000040,
    AES_AES_CTRL_CTR_M = 0x00000040,
    AES_AES_CTRL_CTR_S = 6,
    AES_AES_CTRL_CBC = 0x00000020,
    AES_AES_CTRL_CBC_M = 0x00000020,
    AES_AES_CTRL_CBC_S = 5,
    AES_AES_CTRL_key_size_M = 0x00000018,
    AES_AES_CTRL_key_size_S = 3,
    AES_AES_CTRL_direction = 0x00000004,
    AES_AES_CTRL_direction_M = 0x00000004,
    AES_AES_CTRL_direction_S = 2,
    AES_AES_CTRL_input_ready = 0x00000002,
    AES_AES_CTRL_input_ready_M = 0x00000002,
    AES_AES_CTRL_input_ready_S = 1,
    AES_AES_CTRL_output_ready = 0x00000001,
    AES_AES_CTRL_output_ready_M = 0x00000001,
    AES_AES_CTRL_output_ready_S = 0,
  };

  // Bit fields for the AES_AES_C_LENGTH_0 register
  enum {
    AES_AES_C_LENGTH_0_C_LENGTH_M = 0xFFFFFFFF,
    AES_AES_C_LENGTH_0_C_LENGTH_S = 0,
  };

  // Bit fields for the AES_AES_C_LENGTH_1 register
  enum {
    AES_AES_C_LENGTH_1_C_LENGTH_M = 0xFFFFFFFF,
    AES_AES_C_LENGTH_1_C_LENGTH_S = 0,
  };

  // Bit fields for the AES_AES_AUTH_LENGTH register
  enum {
    AES_AES_AUTH_LENGTH_AUTH_LENGTH_M = 0xFFFFFFFF,
    AES_AES_AUTH_LENGTH_AUTH_LENGTH_S = 0,
  };

  // Bit fields for the AES_AES_DATA_IN_OUT_0 register
  enum {
    AES_AES_DATA_IN_OUT_0_AES_DATA_IN_OUT_M = 0xFFFFFFFF,
    AES_AES_DATA_IN_OUT_0_AES_DATA_IN_OUT_S = 0,
  };

  // Bit fields for the AES_AES_DATA_IN_OUT_1 register
  enum {
    AES_AES_DATA_IN_OUT_1_AES_DATA_IN_OUT_M = 0xFFFFFFFF,
    AES_AES_DATA_IN_OUT_1_AES_DATA_IN_OUT_S = 0,
  };

  // Bit fields for the AES_AES_DATA_IN_OUT_2 register
  enum {
    AES_AES_DATA_IN_OUT_2_AES_DATA_IN_OUT_M = 0xFFFFFFFF,
    AES_AES_DATA_IN_OUT_2_AES_DATA_IN_OUT_S = 0,
  };

  // Bit fields for the AES_AES_DATA_IN_OUT_3 register
  enum {
    AES_AES_DATA_IN_OUT_3_AES_DATA_IN_OUT_M = 0xFFFFFFFF,
    AES_AES_DATA_IN_OUT_3_AES_DATA_IN_OUT_S = 0,
  };

  // Bit fields for the AES_AES_TAG_OUT_0 register
  enum {
    AES_AES_TAG_OUT_0_AES_TAG_M = 0xFFFFFFFF,
    AES_AES_TAG_OUT_0_AES_TAG_S = 0,
  };

  // Bit fields for the AES_AES_TAG_OUT_1 register
  enum {
    AES_AES_TAG_OUT_1_AES_TAG_M = 0xFFFFFFFF,
    AES_AES_TAG_OUT_1_AES_TAG_S = 0,
  };

  // Bit fields for the AES_AES_TAG_OUT_2 register
  enum {
    AES_AES_TAG_OUT_2_AES_TAG_M = 0xFFFFFFFF,
    AES_AES_TAG_OUT_2_AES_TAG_S = 0,
  };

  // Bit fields for the AES_AES_TAG_OUT_3 register
  enum {
    AES_AES_TAG_OUT_3_AES_TAG_M = 0xFFFFFFFF,
    AES_AES_TAG_OUT_3_AES_TAG_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_0 register
  enum {
    AES_HASH_DATA_IN_0_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_0_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_1 register
  enum {
    AES_HASH_DATA_IN_1_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_1_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_2 register
  enum {
    AES_HASH_DATA_IN_2_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_2_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_3 register
  enum {
    AES_HASH_DATA_IN_3_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_3_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_4 register
  enum {
    AES_HASH_DATA_IN_4_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_4_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_5 register
  enum {
    AES_HASH_DATA_IN_5_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_5_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_6 register
  enum {
    AES_HASH_DATA_IN_6_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_6_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_7 register
  enum {
    AES_HASH_DATA_IN_7_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_7_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_8 register
  enum {
    AES_HASH_DATA_IN_8_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_8_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_9 register
  enum {
    AES_HASH_DATA_IN_9_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_9_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_10 register
  enum {
    AES_HASH_DATA_IN_10_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_10_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_11 register
  enum {
    AES_HASH_DATA_IN_11_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_11_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_12 register
  enum {
    AES_HASH_DATA_IN_12_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_12_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_13 register
  enum {
    AES_HASH_DATA_IN_13_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_13_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_14 register
  enum {
    AES_HASH_DATA_IN_14_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_14_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DATA_IN_15 register
  enum {
    AES_HASH_DATA_IN_15_HASH_DATA_IN_M = 0xFFFFFFFF,
    AES_HASH_DATA_IN_15_HASH_DATA_IN_S = 0,
  };

  // Bit fields for the AES_HASH_IO_BUF_CTRL register
  enum {
    AES_HASH_IO_BUF_CTRL_PAD_DMA_MESSAGE = 0x00000080,
    AES_HASH_IO_BUF_CTRL_PAD_DMA_MESSAGE_M = 0x00000080,
    AES_HASH_IO_BUF_CTRL_PAD_DMA_MESSAGE_S = 7,
    AES_HASH_IO_BUF_CTRL_GET_DIGEST = 0x00000040,
    AES_HASH_IO_BUF_CTRL_GET_DIGEST_M = 0x00000040,
    AES_HASH_IO_BUF_CTRL_GET_DIGEST_S = 6,
    AES_HASH_IO_BUF_CTRL_PAD_MESSAGE = 0x00000020,
    AES_HASH_IO_BUF_CTRL_PAD_MESSAGE_M = 0x00000020,
    AES_HASH_IO_BUF_CTRL_PAD_MESSAGE_S = 5,
    AES_HASH_IO_BUF_CTRL_RFD_IN = 0x00000004,
    AES_HASH_IO_BUF_CTRL_RFD_IN_M = 0x00000004,
    AES_HASH_IO_BUF_CTRL_RFD_IN_S = 2,
    AES_HASH_IO_BUF_CTRL_DATA_IN_AV = 0x00000002,
    AES_HASH_IO_BUF_CTRL_DATA_IN_AV_M = 0x00000002,
    AES_HASH_IO_BUF_CTRL_DATA_IN_AV_S = 1,
    AES_HASH_IO_BUF_CTRL_OUTPUT_FULL = 0x00000001,
    AES_HASH_IO_BUF_CTRL_OUTPUT_FULL_M = 0x00000001,
    AES_HASH_IO_BUF_CTRL_OUTPUT_FULL_S = 0,
  };

  // Bit fields for the AES_HASH_MODE_IN register
  enum {
    AES_HASH_MODE_IN_SHA256_MODE = 0x00000008,
    AES_HASH_MODE_IN_SHA256_MODE_M = 0x00000008,
    AES_HASH_MODE_IN_SHA256_MODE_S = 3,
    AES_HASH_MODE_IN_NEW_HASH = 0x00000001,
    AES_HASH_MODE_IN_NEW_HASH_M = 0x00000001,
    AES_HASH_MODE_IN_NEW_HASH_S = 0,
  };

  // Bit fields for the AES_HASH_LENGTH_IN_L register
  enum {
    AES_HASH_LENGTH_IN_L_LENGTH_IN_M = 0xFFFFFFFF,
    AES_HASH_LENGTH_IN_L_LENGTH_IN_S = 0,
  };

  // Bit fields for the AES_HASH_LENGTH_IN_H register
  enum {
    AES_HASH_LENGTH_IN_H_LENGTH_IN_M = 0xFFFFFFFF,
    AES_HASH_LENGTH_IN_H_LENGTH_IN_S = 0,
  };

  // Bit fields for the AES_HASH_DIGEST_A register
  enum {
    AES_HASH_DIGEST_A_HASH_DIGEST_M = 0xFFFFFFFF,
    AES_HASH_DIGEST_A_HASH_DIGEST_S = 0,
  };

  // Bit fields for the AES_HASH_DIGEST_B register
  enum {
    AES_HASH_DIGEST_B_HASH_DIGEST_M = 0xFFFFFFFF,
    AES_HASH_DIGEST_B_HASH_DIGEST_S = 0,
  };

  // Bit fields for the AES_HASH_DIGEST_C register
  enum {
    AES_HASH_DIGEST_C_HASH_DIGEST_M = 0xFFFFFFFF,
    AES_HASH_DIGEST_C_HASH_DIGEST_S = 0,
  };

  // Bit fields for the AES_HASH_DIGEST_D register
  enum {
    AES_HASH_DIGEST_D_HASH_DIGEST_M = 0xFFFFFFFF,
    AES_HASH_DIGEST_D_HASH_DIGEST_S = 0,
  };

  // Bit fields for the AES_HASH_DIGEST_E register
  enum {
    AES_HASH_DIGEST_E_HASH_DIGEST_M = 0xFFFFFFFF,
    AES_HASH_DIGEST_E_HASH_DIGEST_S = 0,
  };

  // Bit fields for the AES_HASH_DIGEST_F register
  enum {
    AES_HASH_DIGEST_F_HASH_DIGEST_M = 0xFFFFFFFF,
    AES_HASH_DIGEST_F_HASH_DIGEST_S = 0,
  };

  // Bit fields for the AES_HASH_DIGEST_G register
  enum {
    AES_HASH_DIGEST_G_HASH_DIGEST_M = 0xFFFFFFFF,
    AES_HASH_DIGEST_G_HASH_DIGEST_S = 0,
  };

  // Bit fields for the AES_HASH_DIGEST_H register
  enum {
    AES_HASH_DIGEST_H_HASH_DIGEST_M = 0xFFFFFFFF,
    AES_HASH_DIGEST_H_HASH_DIGEST_S = 0,
  };

  // Bit fields for the AES_CTRL_ALG_SEL register
  enum {
    AES_CTRL_ALG_SEL_TAG = 0x80000000,
    AES_CTRL_ALG_SEL_TAG_M = 0x80000000,
    AES_CTRL_ALG_SEL_TAG_S = 31,
    AES_CTRL_ALG_SEL_HASH = 0x00000004,
    AES_CTRL_ALG_SEL_HASH_M = 0x00000004,
    AES_CTRL_ALG_SEL_HASH_S = 2,
    AES_CTRL_ALG_SEL_AES = 0x00000002,
    AES_CTRL_ALG_SEL_AES_M = 0x00000002,
    AES_CTRL_ALG_SEL_AES_S = 1,
    AES_CTRL_ALG_SEL_KEYSTORE = 0x00000001,
    AES_CTRL_ALG_SEL_KEYSTORE_M = 0x00000001,
    AES_CTRL_ALG_SEL_KEYSTORE_S = 0,
  };

  // Bit fields for the AES_CTRL_PROT_EN register
  enum {
    AES_CTRL_PROT_EN_PROT_EN = 0x00000001,
    AES_CTRL_PROT_EN_PROT_EN_M = 0x00000001,
    AES_CTRL_PROT_EN_PROT_EN_S = 0,
  };

  // Bit fields for the AES_CTRL_SW_RESET register
  enum {
    AES_CTRL_SW_RESET_SW_RESET = 0x00000001,
    AES_CTRL_SW_RESET_SW_RESET_M = 0x00000001,
    AES_CTRL_SW_RESET_SW_RESET_S = 0,
  };

  // Bit fields for the AES_CTRL_INT_CFG register
  enum {
    AES_CTRL_INT_CFG_LEVEL = 0x00000001,
    AES_CTRL_INT_CFG_LEVEL_M = 0x00000001,
    AES_CTRL_INT_CFG_LEVEL_S = 0,
  };

  // Bit fields for the AES_CTRL_INT_EN register
  enum {
    AES_CTRL_INT_EN_DMA_IN_DONE = 0x00000002,
    AES_CTRL_INT_EN_DMA_IN_DONE_M = 0x00000002,
    AES_CTRL_INT_EN_DMA_IN_DONE_S = 1,
    AES_CTRL_INT_EN_RESULT_AV = 0x00000001,
    AES_CTRL_INT_EN_RESULT_AV_M = 0x00000001,
    AES_CTRL_INT_EN_RESULT_AV_S = 0,
  };

  // Bit fields for the AES_CTRL_INT_CLR register
  enum {
    AES_CTRL_INT_CLR_DMA_BUS_ERR = 0x80000000,
    AES_CTRL_INT_CLR_DMA_BUS_ERR_M = 0x80000000,
    AES_CTRL_INT_CLR_DMA_BUS_ERR_S = 31,
    AES_CTRL_INT_CLR_KEY_ST_WR_ERR = 0x40000000,
    AES_CTRL_INT_CLR_KEY_ST_WR_ERR_M = 0x40000000,
    AES_CTRL_INT_CLR_KEY_ST_WR_ERR_S = 30,
    AES_CTRL_INT_CLR_KEY_ST_RD_ERR = 0x20000000,
    AES_CTRL_INT_CLR_KEY_ST_RD_ERR_M = 0x20000000,
    AES_CTRL_INT_CLR_KEY_ST_RD_ERR_S = 29,
    AES_CTRL_INT_CLR_DMA_IN_DONE = 0x00000002,
    AES_CTRL_INT_CLR_DMA_IN_DONE_M = 0x00000002,
    AES_CTRL_INT_CLR_DMA_IN_DONE_S = 1,
    AES_CTRL_INT_CLR_RESULT_AV = 0x00000001,
    AES_CTRL_INT_CLR_RESULT_AV_M = 0x00000001,
    AES_CTRL_INT_CLR_RESULT_AV_S = 0,
  };

  // Bit fields for the AES_CTRL_INT_SET register
  enum {
    AES_CTRL_INT_SET_DMA_IN_DONE = 0x00000002,
    AES_CTRL_INT_SET_DMA_IN_DONE_M = 0x00000002,
    AES_CTRL_INT_SET_DMA_IN_DONE_S = 1,
    AES_CTRL_INT_SET_RESULT_AV = 0x00000001,
    AES_CTRL_INT_SET_RESULT_AV_M = 0x00000001,
    AES_CTRL_INT_SET_RESULT_AV_S = 0,
  };

  // Bit fields for the AES_CTRL_INT_STAT register
  enum {
    AES_CTRL_INT_STAT_DMA_BUS_ERR = 0x80000000,
    AES_CTRL_INT_STAT_DMA_BUS_ERR_M = 0x80000000,
    AES_CTRL_INT_STAT_DMA_BUS_ERR_S = 31,
    AES_CTRL_INT_STAT_KEY_ST_WR_ERR = 0x40000000,
    AES_CTRL_INT_STAT_KEY_ST_WR_ERR_M = 0x40000000,
    AES_CTRL_INT_STAT_KEY_ST_WR_ERR_S = 30,
    AES_CTRL_INT_STAT_KEY_ST_RD_ERR = 0x20000000,
    AES_CTRL_INT_STAT_KEY_ST_RD_ERR_M = 0x20000000,
    AES_CTRL_INT_STAT_KEY_ST_RD_ERR_S = 29,
    AES_CTRL_INT_STAT_DMA_IN_DONE = 0x00000002,
    AES_CTRL_INT_STAT_DMA_IN_DONE_M = 0x00000002,
    AES_CTRL_INT_STAT_DMA_IN_DONE_S = 1,
    AES_CTRL_INT_STAT_RESULT_AV = 0x00000001,
    AES_CTRL_INT_STAT_RESULT_AV_M = 0x00000001,
    AES_CTRL_INT_STAT_RESULT_AV_S = 0,
  };

  // Bit fields for the AES_CTRL_OPTIONS register
  enum {
    AES_CTRL_OPTIONS_TYPE_M = 0xFF000000,
    AES_CTRL_OPTIONS_TYPE_S = 24,
    AES_CTRL_OPTIONS_AHBINTERFACE = 0x00010000,
    AES_CTRL_OPTIONS_AHBINTERFACE_M = 0x00010000,
    AES_CTRL_OPTIONS_AHBINTERFACE_S = 16,
    AES_CTRL_OPTIONS_SHA_256 = 0x00000100,
    AES_CTRL_OPTIONS_SHA_256_M = 0x00000100,
    AES_CTRL_OPTIONS_SHA_256_S = 8,
    AES_CTRL_OPTIONS_AES_CCM = 0x00000080,
    AES_CTRL_OPTIONS_AES_CCM_M = 0x00000080,
    AES_CTRL_OPTIONS_AES_CCM_S = 7,
    AES_CTRL_OPTIONS_AES_GCM = 0x00000040,
    AES_CTRL_OPTIONS_AES_GCM_M = 0x00000040,
    AES_CTRL_OPTIONS_AES_GCM_S = 6,
    AES_CTRL_OPTIONS_AES_256 = 0x00000020,
    AES_CTRL_OPTIONS_AES_256_M = 0x00000020,
    AES_CTRL_OPTIONS_AES_256_S = 5,
    AES_CTRL_OPTIONS_AES_128 = 0x00000010,
    AES_CTRL_OPTIONS_AES_128_M = 0x00000010,
    AES_CTRL_OPTIONS_AES_128_S = 4,
    AES_CTRL_OPTIONS_HASH = 0x00000004,
    AES_CTRL_OPTIONS_HASH_M = 0x00000004,
    AES_CTRL_OPTIONS_HASH_S = 2,
    AES_CTRL_OPTIONS_AES = 0x00000002,
    AES_CTRL_OPTIONS_AES_M = 0x00000002,
    AES_CTRL_OPTIONS_AES_S = 1,
    AES_CTRL_OPTIONS_KEYSTORE = 0x00000001,
    AES_CTRL_OPTIONS_KEYSTORE_M = 0x00000001,
    AES_CTRL_OPTIONS_KEYSTORE_S = 0,
  };

  // Bit fields for the AES_CTRL_VERSION register
  enum {
    AES_CTRL_VERSION_MAJOR_VERSION_M = 0x0F000000,
    AES_CTRL_VERSION_MAJOR_VERSION_S = 24,
    AES_CTRL_VERSION_MINOR_VERSION_M = 0x00F00000,
    AES_CTRL_VERSION_MINOR_VERSION_S = 20,
    AES_CTRL_VERSION_PATCH_LEVEL_M = 0x000F0000,
    AES_CTRL_VERSION_PATCH_LEVEL_S = 16,
    AES_CTRL_VERSION_EIP_NUMBER_COMPL_M = 0x0000FF00,
    AES_CTRL_VERSION_EIP_NUMBER_COMPL_S = 8,
    AES_CTRL_VERSION_EIP_NUMBER_M = 0x000000FF,
    AES_CTRL_VERSION_EIP_NUMBER_S = 0,
  };

protected:
  static volatile unsigned int &aesreg(unsigned int address) {
    return *(reinterpret_cast<volatile unsigned int *>(address));
  }
};

__END_SYS

#endif
